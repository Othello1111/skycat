# E.S.O. - VLT project 
# $Id: configure.in,v 1.36 1998/10/30 18:17:50 abrighto Exp $
#
# This file is used with GNU autoconf to generate a configure script for
# the Skycat modules.
#
# usage: % autoconf  # only if configure.in changed, use version 2.7 or later
#        % configure
#        % make
# who             when       what
# --------------  --------   ---------------------------------------------
# Allan Brighton  04 Oct 95  Created
# Allan Brighton  08/Apr/97  Use rtdConfig.sh and catConfig.shto get path and 
#                            shared lib info
# Allan Brighton  26/Nov/97  Use 2 new packages: astrotcl and tclutil. 
#
# -----------------------------------------------------------------------

AC_INIT(interp/tkAppInit.C)

# -----------------------------------------------------------------------
#
# Set the Skycat version from the VERSION file in this directory
# (That is the place to set the Skycat version number for a new release)
#
# -----------------------------------------------------------------------
SKYCAT_VERSION=`cat VERSION | sed -e 's/skycat-//'`
AC_SUBST(SKYCAT_VERSION)

# -----------------------------------------------------------------------
#
# Set prefix variable if one wasn't provided
#
# -----------------------------------------------------------------------
if test "$prefix" = "NONE" ; then
    #prefix=`(cd ..; pwd)`/install
    prefix=/usr/local
fi
echo "using prefix = $prefix"
AC_SUBST(prefix)

# -----------------------------------------------------------------------
#
# Set PWD variable (/bin/sh may inherit the wrong value...)
#
# -----------------------------------------------------------------------
PWD=`pwd`

SRC_ROOT=$PWD
AC_SUBST(SRC_ROOT)

# -----------------------------------------------------------------------
#
# C compiler and debugging flags
#
# -----------------------------------------------------------------------
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_CPP
AC_PROG_CXX
    
AC_ARG_WITH(gcc, [--with-gcc         use gcc compiler], CC=gcc; CXX=g++)
AC_ARG_WITH(cc,  [--with-cc          use cc compiler], CC=cc; CXX=CC)

# -----------------------------------------------------------------------
#
# Read the package config files to find out where the X and Tcl/Tk 
# and other files and libraries are and how to make shared libraries.
#
# -----------------------------------------------------------------------

# sh procedure to find a config file: arg: 
# $1 = name in lower case ("rtd")

getConfig() {
  name=${1}Config.sh
  echo "checking for ${name}"
  TCL_CONFIG_DIR=""
  places="\
   ../tclutil \
   ../astrotcl \
   ../rtd \
   ../cat \
   $prefix/lib/itcl \
   $prefix/lib \
   /vlt/dflow/lib/itcl \
   /vlt/dflow/lib \
   $TCL_LIBRARY/.. \
   $PWD/../tcl \
   /usr/local/lib/itcl \
   /usr/local/lib"
  for dir in $places; do
    if test -r $dir/${name} ; then
      TCL_CONFIG_DIR=$dir
      break
    fi
  done
  while test -z "$TCL_CONFIG_DIR" ; do
    echo "What directory contains ${name} ?"
    read TCL_CONFIG_DIR
    if test ! -r $TCL_CONFIG_DIR/${name} ; then
      echo "can't read $TCL_CONFIG_DIR/${name}"
      TCL_CONFIG_DIR=""
    fi
  done
    
  # source the Tcl config file
  . $TCL_CONFIG_DIR/${name}
}

# source the config files
getConfig tclutil
getConfig astrotcl
getConfig rtd
getConfig cat

# get -D defines
DEFS=$TCLUTIL_DEFS
AC_SUBST(DEFS)

# for now, just use the compiler settings used to build rtd
CC=$TCLUTIL_CC
CXX=$TCLUTIL_CXX
AC_SUBST(CC)
AC_SUBST(CXX)

# pass these valaues on from the Tclutil package
LD_VARNAME=$TCLUTIL_LD_VARNAME
AC_SUBST(LD_VARNAME)

LIB_RUNTIME_DIR=$TCLUTIL_LIB_RUNTIME_DIR
AC_SUBST(LIB_RUNTIME_DIR)

TCLTK_ROOT=$TCLUTIL_TCLTK_ROOT
AC_SUBST(TCLTK_ROOT)

# versions
AC_SUBST(TCLUTIL_VERSION)
AC_SUBST(ASTROTCL_VERSION)
AC_SUBST(RTD_VERSION)
AC_SUBST(CAT_VERSION)

TCL_VERSION=$TCLUTIL_TCL_VERSION
TK_VERSION=$TCLUTIL_TK_VERSION
ITCL_VERSION=$TCLUTIL_ITCL_VERSION
ITK_VERSION=$TCLUTIL_ITK_VERSION
TCLX_VERSION=$TCLUTIL_TCLX_VERSION
BLT_VERSION=$TCLUTIL_BLT_VERSION

AC_SUBST(TCL_VERSION)
AC_SUBST(TK_VERSION)
AC_SUBST(ITCL_VERSION)
AC_SUBST(ITK_VERSION)
AC_SUBST(TCLX_VERSION)
AC_SUBST(BLT_VERSION)

if test "$RTD_NO_TCL" = "1"; then
    echo "*** Error: Please configure 'rtd' first without the --with-notcl option"
    exit 1
fi
if test "$CAT_NO_TCL" = "1"; then
    echo "*** Error: Please configure the 'cat' package first without the --with-notcl option"
    exit 1
fi

# -----------------------------------------------------------------------
# Check for the Tclpro package from Scriptics
# -----------------------------------------------------------------------
AC_MSG_CHECKING([TclPro ])
file=`which prowrap`
if test -f $file ; then
	f=`dirname $file`
	TCLPRO_MACH_DIR=`dirname $f`
	TCLPRO_DIR=`dirname $TCLPRO_MACH_DIR`
	AC_MSG_RESULT([ yes ])
else
	AC_MSG_RESULT([ no ])
fi
AC_SUBST(TCLPRO_MACH_DIR)
AC_SUBST(TCLPRO_DIR)

# -----------------------------------------------------------------------
#
# "makedepend" info
#
# normally, "makedepend" wants to know all of the path names and will
# cause make errors if the include path to the C++ includes is not given.
# Here we try to extract that information from the C++ preprocessor output.
# The syntax of the output is different for different compilers...
#
# -----------------------------------------------------------------------
CXX_INCLUDE=$TCLUTIL_CXX_INCLUDE
AC_SUBST(CXX_INCLUDE)
AC_SUBST(CXX_DEPEND_FLAGS)

# -----------------------------------------------------------------------
#
# Try to find the location of the static C++ libraries for g++ or CC and
# make links in the et dir so that the single binary version will not
# be depending on the C++ shared library, which might not always be installed.
#
# -----------------------------------------------------------------------
AC_MSG_CHECKING([static C++ library ])
tmpfile=/tmp/tmp$$.C
tmp1=/tmp/tmp1$$
tmp2=/tmp/tmp2$$
echo 'main(){}' > $tmpfile
$CXX -v $tmpfile > $tmp1 2>&1
echo > $tmp2
for i in `cat $tmp1`; do 
	echo $i >> $tmp2
done
dirs="`grep -- -L $tmp2` /usr/lib /lib"
for i in $dirs ; do
	dir=`echo $i | sed -e 's/-L//'`
	if test -f $dir/libg++.a ; then
		(cd et; rm -f libg++.a libstdc++.a; ln -s $dir/libg++.a $dir/libstdc++.a . )
		(cd tclpro; rm -f libg++.a libstdc++.a; ln -s $dir/libg++.a $dir/libstdc++.a . )
		AC_MSG_RESULT($dir/libg++.a)
		break
	fi
done
for i in $dirs ; do
	dir=`echo $i | sed -e 's/-L//'`
	if test -f $dir/libC.a ; then
		(cd et; rm -f libC.a; ln -s $dir/libC.a . )
		(cd tclpro; rm -f libC.a; ln -s $dir/libC.a . )
		AC_MSG_RESULT($dir/libC.a)
		break
	fi
done
rm -f $tmp1
rm -f $tmp2
rm -f $tmpfile

# -----------------------------------------------------------------------
#
# set OS version string
#
# -----------------------------------------------------------------------
OSVERSION="`uname -s`-`uname -r`"
AC_SUBST(OSVERSION)

# -----------------------------------------------------------------------
#
# if we are using gcc, we can get better make dependencies using gcc -MM 
# otherwise we have to use  "makedepend", which sometimes gets confused. 
# This sets the make target to use:
#
# -----------------------------------------------------------------------
DEPEND_TARGET=$TCLUTIL_DEPEND_TARGET
AC_SUBST(DEPEND_TARGET)

# -----------------------------------------------------------------------
#
# use CDEBUGFLAGS for C and CXXDEBUGFLAGS for C++ compiler options
#
# -----------------------------------------------------------------------
if test "$CC" = "gcc" ; then
	CDEBUGFLAGS="-g -O"
fi
if test "$CXX" = "g++" ; then
	CXXDEBUGFLAGS="-g -O"
fi
AC_ARG_WITH(debug, [--with-debug       use debugging flag], 
	CDEBUGFLAGS="-g"; CXXDEBUGFLAGS="-g", 
	CDEBUGFLAGS="-O"; CXXDEBUGFLAGS="-O")

AC_SUBST(CDEBUGFLAGS)
AC_SUBST(CXXDEBUGFLAGS)

# -----------------------------------------------------------------------
#
# Check if we are using (and creating) shared libraries 
# If so, we use the information in tclConfig.sh to determine the compiler
# options. 
#
# -----------------------------------------------------------------------

AC_ARG_ENABLE(shared, [--enable-shared    build and use shared libraries],
	SHARED=1,
	SHARED=0)
AC_SUBST(SHARED)

if test $SHARED -eq 0 ; then
	echo "Don't build shared libraries"
else
	echo "Will build shared libraries"
fi

# Flags to pass to cc when compiling the components of a shared library:
SHLIB_CFLAGS=$TCLUTIL_SHLIB_CFLAGS

# Base command to use for combining object files into a shared library:
SHLIB_LD=$TCLUTIL_SHLIB_LD

# Suffix to use for the name of a shared library.
SHLIB_SUFFIX=$TCLUTIL_SHLIB_SUFFIX

# Either '$LIBS' (if dependent libraries should be included when linking
# shared libraries) or an empty string.  See Tcl's configure.in for more
SHLIB_LD_LIBS=$TCLUTIL_SHLIB_LD_LIBS

# Library file(s) to include in tclsh and other base applications
# in order to provide facilities needed by DLOBJ above.
DL_LIBS=$TCLUTIL_DL_LIBS

# Flags to pass to the compiler when linking object files into
# an executable tclsh or tcltest binary.
LD_FLAGS=$TCLUTIL_LD_FLAGS

# Flags to pass to cc, such as "-Wl,-R,/usr/local/tcl/lib", that tell the
# run-time dynamic linker where to look for shared libraries such as
# libtcl.so.  Used when linking applications.  Only works if there
# is a variable "LIB_RUNTIME_DIR" defined in the Makefile.
LD_SEARCH_FLAGS=$TCLUTIL_LD_SEARCH_FLAGS

AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SHLIB_LD_LIBS)
AC_SUBST(DL_LIBS)
AC_SUBST(LD_FLAGS)
AC_SUBST(LD_SEARCH_FLAGS)


# -----------------------------------------------------------------------
# Check the location of X libraries and includes.
# -----------------------------------------------------------------------

# -I switch(es) to use to make all of the X11 include files accessible:
XINCSW=$TCLUTIL_XINCSW

# Linker switch(es) to use to link with the X11 library archive.
XLIBSW=$TCLUTIL_XLIBSW

# Linker switch(es) to use to link with the static X11 library archive.
XLIBSW=$TCLUTIL_XLIBSW

# dir for X libs
XLIBDIR=$TCLUTIL_XLIBDIR

AC_SUBST(XINCSW)
AC_SUBST(XLIBSW)
AC_SUBST(XLIBDIR)

# -----------------------------------------------------------------------
#
# Tcl/Tk information
#
# -----------------------------------------------------------------------

# get the -L and -l library flags

TCL_LIB_SPEC=$TCLUTIL_TCL_LIB_SPEC
TK_LIB_SPEC=$TCLUTIL_TK_LIB_SPEC
TCLX_LIB_SPEC=$TCLUTIL_TCLX_LIB_SPEC
ITCL_LIB_SPEC=$TCLUTIL_ITCL_LIB_SPEC
ITK_LIB_SPEC=$TCLUTIL_ITK_LIB_SPEC
BLT_LIB_SPEC=$TCLUTIL_BLT_LIB_SPEC

AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TCLX_LIB_SPEC)
AC_SUBST(ITCL_LIB_SPEC)
AC_SUBST(ITK_LIB_SPEC)
AC_SUBST(BLT_LIB_SPEC)

# get the -I include flags

TCLINCSW=$TCLUTIL_TCLINCSW
TKINCSW=$TCLUTIL_TKINCSW

AC_SUBST(TCLINCSW)
AC_SUBST(TKINCSW)

# -----------------------------------------------------------------------
#
# For the single binary version of skycat, we want to use the system 
# shared libraries, but otherwise for Tcl/Tk and X the static archives,
# if they are there. This makes it easier to give away a binary, since
# every system may have different X lib and Tcl/Tk shared libs installed.
#
# -----------------------------------------------------------------------
# shell procedure to convert a specification in the form:
#     "-L/usr/local/lib -lX11 -lXext" 
# to:
#     "/usr/local/lib/libX11.a /usr/local/lib/libXext.a"
# (if the static archives exists).
#
# Args: $1 is the original lib spec (-L... -l...)

getStaticLib() {
    dirs=""
    for i in $*
    do
	d=`echo $i | sed -e 's/-L\(.*\)/\1/'`
	test "$d" != "$i" && dirs="$dirs$d "
    done
    test -z "$dirs" && dirs="\
   	$prefix/lib \
	$prefix/lib/itcl \
   	$TCLTK_ROOT/lib \
   	$TCLTK_ROOT/lib/itcl \
   	/vlt/tcltk/lib \
   	/vlt/tcltk/lib/itcl \
	/usr/local/lib \
   	/usr/local/lib/itcl"
    
    libs=""
    for i in $*
    do
	l=`echo $i | sed -e 's/-l\(.*\)/\1/' -e 's/${TCL_DBGX}//' -e 's/${TK_DBGX}//'`
	test "$l" != "$i" && libs="$libs$l "
    done

    # take the first archive that works
    result=""
    for lib in $libs
    do
	for dir in $dirs
	do
	    if test -f $dir/lib${lib}.a
	    then
		result="$result$dir/lib${lib}.a "
		break
	    fi
	done
    done

    test -z "$result" && result=$*
    echo $result
}


XLIBSW_STATIC=`getStaticLib $XLIBSW`
TCL_LIB_SPEC_STATIC=`getStaticLib $TCL_LIB_SPEC`
TK_LIB_SPEC_STATIC=`getStaticLib $TK_LIB_SPEC`
TCLX_LIB_SPEC_STATIC=`getStaticLib $TCLX_LIB_SPEC`
ITCL_LIB_SPEC_STATIC=`getStaticLib $ITCL_LIB_SPEC`
ITK_LIB_SPEC_STATIC=`getStaticLib $ITK_LIB_SPEC`
BLT_LIB_SPEC_STATIC=`getStaticLib $BLT_LIB_SPEC`

AC_SUBST(XLIBSW_STATIC)
AC_SUBST(TCL_LIB_SPEC_STATIC)
AC_SUBST(TK_LIB_SPEC_STATIC)
AC_SUBST(TCLX_LIB_SPEC_STATIC)
AC_SUBST(ITCL_LIB_SPEC_STATIC)
AC_SUBST(ITK_LIB_SPEC_STATIC)
AC_SUBST(BLT_LIB_SPEC_STATIC)

# add Tix support (there is no tixConfig.sh, but catlib set this up
# already in catConfig.sh)
# TIX_LIB_SPEC=$CAT_TIX_LIB_SPEC
# TIX_SAM_LIB_SPEC=$CAT_TIX_SAM_LIB_SPEC
# TIX_LIB_SPEC_STATIC=`getStaticLib $TIX_SAM_LIB_SPEC`
# AC_SUBST(TIX_LIB_SPEC)
# AC_SUBST(TIX_LIB_SPEC_STATIC)

# -----------------------------------------------------------------------
# tcl package library files
# -----------------------------------------------------------------------
TCL_LIBRARY=$TCLUTIL_TCL_LIBRARY
AC_SUBST(TCL_LIBRARY)

TK_LIBRARY=$TCLUTIL_TK_LIBRARY
AC_SUBST(TK_LIBRARY)

BLT_LIBRARY=$TCLUTIL_BLT_LIBRARY
AC_SUBST(BLT_LIBRARY)

AC_SUBST(TCLUTIL_LIBRARY)
AC_SUBST(ASTROTCL_LIBRARY)
AC_SUBST(RTD_LIBRARY)
AC_SUBST(CAT_LIBRARY)

# -----------------------------------------------------------------------
# system libs
# -----------------------------------------------------------------------
LIBS=$TCLUTIL_LIBS
AC_SUBST(LIBS)

# -----------------------------------------------------------------------
# Check if we are using the installed TCLUTIL library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $TCLUTIL_SRC_ROOT; then
	TCLUTIL_LIB=$TCLUTIL_BUILD_LIB_SPEC
	TCLUTIL_LIB_STATIC=$TCLUTIL_BUILD_LIB_SPEC_STATIC
	TCLUTIL_BUILD_LIBRARY=$TCLUTIL_BUILD_LIBRARY
else
	TCLUTIL_LIB=$TCLUTIL_LIB_SPEC
	TCLUTIL_LIB_STATIC=$TCLUTIL_LIB_SPEC_STATIC
	TCLUTIL_BUILD_LIBRARY=$TCLUTIL_LIBRARY
fi
AC_SUBST(TCLUTIL_SRC_ROOT)
AC_SUBST(TCLUTIL_LIB)
AC_SUBST(TCLUTIL_LIB_SPEC)
AC_SUBST(TCLUTIL_LIB_STATIC)
AC_SUBST(TCLUTIL_BUILD_LIBRARY)
AC_SUBST(TCLUTIL_BUILD_INCLUDES)

# -----------------------------------------------------------------------
# Check if we are using the installed ASTROTCL library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $ASTROTCL_SRC_ROOT; then
	ASTROTCL_LIB=$ASTROTCL_BUILD_LIB_SPEC
	ASTROTCL_LIB_STATIC=$ASTROTCL_BUILD_LIB_SPEC_STATIC
	ASTROTCL_BUILD_LIBRARY=$ASTROTCL_BUILD_LIBRARY
else
	ASTROTCL_LIB=$ASTROTCL_LIB_SPEC
	ASTROTCL_LIB_STATIC=$ASTROTCL_LIB_SPEC_STATIC
	ASTROTCL_BUILD_LIBRARY=$ASTROTCL_LIBRARY
fi
AC_SUBST(ASTROTCL_SRC_ROOT)
AC_SUBST(ASTROTCL_LIB)
AC_SUBST(ASTROTCL_LIB_SPEC)
AC_SUBST(ASTROTCL_LIB_STATIC)
AC_SUBST(ASTROTCL_BUILD_LIBRARY)
AC_SUBST(ASTROTCL_BUILD_INCLUDES)

# -----------------------------------------------------------------------
# Check if we are using the installed RTD library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $RTD_SRC_ROOT; then
	RTD_LIB=$RTD_BUILD_LIB_SPEC
	RTD_LIB_STATIC=$RTD_BUILD_LIB_SPEC_STATIC
	RTD_BUILD_LIBRARY=$RTD_BUILD_LIBRARY
else
	RTD_LIB=$RTD_LIB_SPEC
	RTD_LIB_STATIC=$RTD_LIB_SPEC_STATIC
	RTD_BUILD_LIBRARY=$RTD_LIBRARY
fi
AC_SUBST(RTD_SRC_ROOT)
AC_SUBST(RTD_LIB)
AC_SUBST(RTD_LIB_SPEC)
AC_SUBST(RTD_LIB_STATIC)
AC_SUBST(RTD_BUILD_LIBRARY)
AC_SUBST(RTD_BUILD_INCLUDES)

# -----------------------------------------------------------------------
# Check if we are using the installed CAT library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $CAT_SRC_ROOT; then
	CAT_LIB=$CAT_BUILD_LIB_SPEC
	CAT_LIB_STATIC=$CAT_BUILD_LIB_SPEC_STATIC
	CAT_BUILD_LIBRARY=$CAT_BUILD_LIBRARY
else
	CAT_LIB=$CAT_LIB_SPEC
	CAT_LIB_STATIC=$CAT_LIB_SPEC_STATIC
	CAT_BUILD_LIBRARY=$CAT_LIBRARY
fi
AC_SUBST(CAT_SRC_ROOT)
AC_SUBST(CAT_LIB)
AC_SUBST(CAT_LIB_SPEC)
AC_SUBST(CAT_LIB_STATIC)
AC_SUBST(CAT_BUILD_LIBRARY)
AC_SUBST(CAT_BUILD_INCLUDES)

#--------------------------------------------------------------------
#	Propagate prefix argument as installation directory.
#--------------------------------------------------------------------
DESTDIR="$prefix"
BINDIR="$DESTDIR/bin"
LIBDIR="$DESTDIR/lib"
INCDIR="$DESTDIR/include/skycat"
MANDIR="$DESTDIR/man"
SKYCAT_DIR="$LIBDIR/skycat"
SKYCAT_LIBRARY=$SKYCAT_DIR
SKYCAT_BUILD_LIBRARY=$SRC_ROOT/interp/library
SKYCAT_BUILD_INCLUDES="-I$SRC_ROOT/interp/include"

AC_SUBST(DESTDIR)
AC_SUBST(BINDIR)
AC_SUBST(LIBDIR)
AC_SUBST(INCDIR)
AC_SUBST(MANDIR)
AC_SUBST(SKYCAT_DIR)
AC_SUBST(SKYCAT_LIBRARY)
AC_SUBST(SKYCAT_BUILD_LIBRARY)
AC_SUBST(SKYCAT_BUILD_INCLUDES)

#--------------------------------------------------------------------
#	Set name of library to link
#--------------------------------------------------------------------

# String to pass to linker to pick up the Skycat library from its
# build directory.
SKYCAT_BUILD_LIB_SPEC="-L$SRC_ROOT -lskycat"

# static version of above
SKYCAT_BUILD_LIB_SPEC_STATIC="$SRC_ROOT/libskycat.a"

# String to pass to linker to pick up the Skycat library from its
# installed directory.
SKYCAT_LIB_SPEC="-L$LIBDIR -lskycat"

# static version of above
SKYCAT_LIB_SPEC_STATIC="$LIBDIR/libskycat.a"

# if we are not building shared libraries, make sure we use the static
# libraries and not get an outdated shared library by accident
if test "$SHARED" = "0"
then
    SKYCAT_BUILD_LIB_SPEC=$SKYCAT_BUILD_LIB_SPEC_STATIC
    SKYCAT_LIB_SPEC=$SKYCAT_LIB_SPEC_STATIC
fi

AC_SUBST(SKYCAT_BUILD_LIB_SPEC)
AC_SUBST(SKYCAT_BUILD_LIB_SPEC_STATIC)
AC_SUBST(SKYCAT_LIB_SPEC)
AC_SUBST(SKYCAT_LIB_SPEC_STATIC)


#--------------------------------------------------------------------
#	Set the directory to use to build the single binary "wrapped" 
#       version.
#--------------------------------------------------------------------

case "$TCL_VERSION" in
  7.6) SKYCAT_WRAPPER_DIR=et;;
  8.*) if test "$TCLPRO_DIR" != "" ; then SKYCAT_WRAPPER_DIR=tclpro; fi;;
  *)   echo "unsupported Tcl version: $TCL_VERSION, expected at least tcl 7.6"; exit 1 ;;
esac
AC_SUBST(SKYCAT_WRAPPER_DIR)

#--------------------------------------------------------------------
#	Print out some of the more important settings 
#--------------------------------------------------------------------
echo "
Configuration results (edit and run ./config.status to modify):

C   Compiler                           => $CC
C++ Compiler                           => $CXX
C++ include flag                       => $CXX_INCLUDE

X include files                        => $XINCSW
Tcl include files                      => $TCLINCSW
Tk include files                       => $TKINCSW

X libs                                 => $XLIBSW
Tcl lib                                => $TCL_LIB_SPEC
Tk lib                                 => $TK_LIB_SPEC
TclX lib                               => $TCLX_LIB_SPEC
Itcl lib                               => $ITCL_LIB_SPEC
Itk lib                                => $ITK_LIB_SPEC
BLT lib                                => $BLT_LIB_SPEC
Tclutil lib                            => $TCLUTIL_LIB
Astrotcl lib                           => $ASTROTCL_LIB
Rtd lib                                => $RTD_LIB
Cat lib                                => $CAT_LIB

static X libraries                     => $XLIBSW_STATIC
static Tcl library                     => $TCL_LIB_SPEC_STATIC
static TK library                      => $TK_LIB_SPEC_STATIC
static TclX library                    => $TCLX_LIB_SPEC_STATIC
static Itcl library                    => $ITCL_LIB_SPEC_STATIC
static Itk library                     => $ITK_LIB_SPEC_STATIC
static BLT library                     => $BLT_LIB_SPEC_STATIC
static Tclutil library                 => $TCLUTIL_LIB_STATIC
static Astrotcl library                => $ASTROTCL_LIB_STATIC
static Rtd library                     => $RTD_LIB_STATIC
static Cat library                     => $CAT_LIB_STATIC

directory containing tcl library files => $TCL_LIBRARY
directory containing tk  library files => $TK_LIBRARY
directory containing blt library files => $BLT_LIBRARY

Take local tclutil library files from  => $TCLUTIL_BUILD_LIBRARY
Take local astrotcl library files from => $ASTROTCL_BUILD_LIBRARY
Take local rtd library files from      => $RTD_BUILD_LIBRARY
Take local cat library files from      => $CAT_BUILD_LIBRARY

install skycat binaries in             => $BINDIR
install skycat libraries in            => $LIBDIR
install skycat include files in        => $INCDIR
install tcl library files in           => $SKYCAT_DIR

directory containing Rtd library files => $RTD_LIBRARY
"

#--------------------------------------------------------------------
#	Generate the Makefiles etc...
#--------------------------------------------------------------------
AC_OUTPUT(\
	Makefile \
        skycatConfig.sh \
\
	interp/Makefile \
	interp/src/Makefile \
	interp/include/Makefile \
	interp/man/Makefile \
	interp/library/Makefile \
	interp/library/skycat_version.tcl \
	interp/demos/Makefile \
	interp/demos/skycat.sh \
	interp/demos/skycat_env.sh \
	interp/bitmaps/Makefile \
	interp/library/pkgIndex.tcl \
\
	et/Makefile \
	tclpro/Makefile \
\
	, chmod +x interp/demos/skycat.sh; sh makelinks; make -k depend \
)

