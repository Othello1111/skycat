# E.S.O. - VLT project 
# $Id: configure.in,v 1.1.1.1 2002/04/04 20:11:45 brighton Exp $
#
# This file is used with GNU autoconf to generate a configure script for
# the Catalog modules.
#
# usage: % autoconf  # only if configure.in changed, use version 2.7 or later
#        % configure
#        % make
# who             when       what
# --------------  --------   ---------------------------------------------
# Allan Brighton  04 Oct 95  Created
# Allan Brighton  08/Apr/97  Use rtdConfig.sh to get path and shared lib info
# Allan Brighton  26/Nov/97  Split rtd into 3 packages (tclutil, astrotcl, rtd)
#                            and removed dependence of cat on the rtd package. 
# P.Biereichel    26/06/99  Option --with-vltgnu added
#
# -----------------------------------------------------------------------

AC_INIT(astrocat/src/AstroCatalogCPP.C)

# -----------------------------------------------------------------------
#
# Set the Catlib version from the VERSION file in this directory
# (That is the place to set the Catlib version number for a new release)
#
# -----------------------------------------------------------------------
CAT_VERSION=`cat VERSION | sed -e 's/catlib-//'`
AC_SUBST(CAT_VERSION)

# -----------------------------------------------------------------------
#
# Set prefix variable if one wasn't provided
#
# -----------------------------------------------------------------------
if test "$prefix" = "NONE" ; then
    #prefix=`(cd ..; pwd)`/install
    prefix=/usr/local
fi
echo "using prefix = $prefix"
AC_SUBST(prefix)

# -----------------------------------------------------------------------
#
# Set PWD variable (/bin/sh may inherit the wrong value...)
#
# -----------------------------------------------------------------------
PWD=`pwd`
SRC_ROOT=$PWD
AC_SUBST(SRC_ROOT)

# -----------------------------------------------------------------------
#
# C compiler and debugging flags
#
# -----------------------------------------------------------------------
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_CPP
AC_PROG_CXX
    
# these options are ignored for now, since all the config info is taken 
# from the previously configured tclutil package

LIB_STDCPP=""
VLTGNU=0
AC_ARG_WITH(vltgnu, [--with-vltgnu      use gcc compiler for C and C++], VLTGNU=1)
if test "$VLTGNU" = "1" ; then
  CC=gcc
  CXX=gcc
  LIB_STDCPP="-lstdc++"
else
  AC_ARG_WITH(gcc, [--with-gcc         use gcc compiler for C and g++ for C++], CC=gcc; CXX=g++)
fi

AC_SUBST(LIB_STDCPP)
AC_ARG_WITH(cc,  [--with-cc          use cc  compiler for C and C++], CC=cc; CXX=CC)

# -----------------------------------------------------------------------
#
# Read some config files to find out where the X and Tcl/Tk and other
# files and libraries are and how to make shared libraries.
#
# -----------------------------------------------------------------------

# sh procedure to find a config file: arg: 
# $1 = name in lower case ("tclutil")

getConfig() {
  name=${1}Config.sh
  echo "checking for ${name}"
  TCL_CONFIG_DIR=""
  places="\
   ../tclutil \
   ../astrotcl \
   $prefix/lib \
   $prefix/lib/itcl \
   /vlt/dflow/lib/itcl \
   /vlt/dflow/lib \
   /usr/local/lib/itcl \
   /usr/local/lib"
  for dir in $places; do
    if test -r $dir/${name} ; then
      TCL_CONFIG_DIR=$dir
      break
    fi
  done
  while test -z "$TCL_CONFIG_DIR" ; do
    echo "What directory contains ${name} ?"
    read TCL_CONFIG_DIR
    if test ! -r $TCL_CONFIG_DIR/${name} ; then
      echo "can't read $TCL_CONFIG_DIR/${name}"
      TCL_CONFIG_DIR=""
    fi
  done
    
  # source the Tcl config file
  . $TCL_CONFIG_DIR/${name}
}

# source the config files
getConfig tclutil
getConfig astrotcl

# for now, just use the compiler settings used to build tclutil
CC=$TCLUTIL_CC
CXX=$TCLUTIL_CXX
AC_SUBST(CC)
AC_SUBST(CXX)

# pass on Tcl/Tk version info
TCL_VERSION=$TCLUTIL_TCL_VERSION
TK_VERSION=$TCLUTIL_TK_VERSION
ITCL_VERSION=$TCLUTIL_ITCL_VERSION
ITK_VERSION=$TCLUTIL_ITK_VERSION
TCLX_VERSION=$TCLUTIL_TCLX_VERSION
BLT_VERSION=$TCLUTIL_BLT_VERSION

# versions
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_VERSION)
AC_SUBST(ITCL_VERSION)
AC_SUBST(ITK_VERSION)
AC_SUBST(TCLX_VERSION)
AC_SUBST(BLT_VERSION)

AC_SUBST(TCLUTIL_VERSION)
AC_SUBST(ASTROTCL_VERSION)

# pass these valaues on from the Tclutil package
LD_VARNAME=$TCLUTIL_LD_VARNAME
AC_SUBST(LD_VARNAME)

LIB_RUNTIME_DIR=$TCLUTIL_LIB_RUNTIME_DIR
AC_SUBST(LIB_RUNTIME_DIR)

# get -D defines
DEFS=$TCLUTIL_DEFS
AC_SUBST(DEFS)

# The environment variable TCLTK_ROOT may be set before running configure
# to help locate the correct Tcl/Tk installation
TCLTK_ROOT=$TCLUTIL_TCLTK_ROOT
AC_SUBST(TCLTK_ROOT)

# source dirs
# source dirs
if test ! -d "$TCLUTIL_SRC_ROOT" -o ! -d "$ASTROTCL_SRC_ROOT"; then
    echo "*** Error: This package requires source access to the tclutil and astrotcl packages."
    echo "*** Please configure and make those packages first."
    exit 1
fi
AC_SUBST(TCLUTIL_SRC_ROOT)
AC_SUBST(ASTROTCL_SRC_ROOT)

# subdirs
AC_SUBST(TCLUTIL_SUBDIRS)
AC_SUBST(TCLUTIL_SUBDIRS_NOTIX)
AC_SUBST(ASTROTCL_SUBDIRS)

# -----------------------------------------------------------------------
#
# The "--with-notcl" option can be used to build a version of this package
# without Tcl access (i.e.: only the C and C++ libraries that do not access
# anything Tcl related).
#
# -----------------------------------------------------------------------

NO_TCL=0
AC_ARG_WITH(notcl, [--with-notcl         Build a version with no Tcl access], NO_TCL=1)
AC_SUBST(NO_TCL)

# The list of source dirs depends on whether we have Tcl access or not
if test "$NO_TCL" = "1" ; then
    echo "Compiling with no Tcl access."
    CAT_SUBDIRS="$SRC_ROOT/astrocat \
                 $SRC_ROOT/ccat"
else
    if test "$TCLUTIL_NO_TCL" = "1"; then
         echo "*** Error: Please configure tclutil first without the --with-notcl option"
	 exit 1
    fi
    if test "$ASTROTCL_NO_TCL" = "1"; then
         echo "*** Error: Please configure astrotcl first without the --with-notcl option"
	 exit 1
    fi

    CAT_SUBDIRS="$SRC_ROOT/astrocat \
                 $SRC_ROOT/ccat \
		 $SRC_ROOT/tclcat"
fi
AC_SUBST(CAT_SUBDIRS)

# -----------------------------------------------------------------------
#
# "makedepend" info
#
# normally, "makedepend" wants to know all of the path names and will
# cause make errors if the include path to the C++ includes is not given.
# Here we try to extract that information from the C++ preprocessor output.
# The syntax of the output is different for different compilers...
#
# -----------------------------------------------------------------------
CXX_INCLUDE=$TCLUTIL_CXX_INCLUDE
AC_SUBST(CXX_INCLUDE)
AC_SUBST(CXX_DEPEND_FLAGS)

# -----------------------------------------------------------------------
#
# set OS version string
#
# -----------------------------------------------------------------------
OSVERSION="`uname -s`-`uname -r`"
AC_SUBST(OSVERSION)

# -----------------------------------------------------------------------
#
# if we are using gcc, we can get better make dependencies using gcc -MM 
# otherwise we have to use  "makedepend", which sometimes gets confused. 
# This sets the make target to use:
#
# -----------------------------------------------------------------------
DEPEND_TARGET=$TCLUTIL_DEPEND_TARGET
AC_SUBST(DEPEND_TARGET)

# -----------------------------------------------------------------------
#
# use CDEBUGFLAGS for C and CXXDEBUGFLAGS for C++ compiler options
#
# -----------------------------------------------------------------------
if test "$CC" = "gcc" ; then
	CDEBUGFLAGS="-g -O"
fi
if test "$CXX" = "g++" ; then
	CXXDEBUGFLAGS="-g -O"
fi
AC_ARG_WITH(debug, [--with-debug       use debugging flag], 
	CDEBUGFLAGS="-g"; CXXDEBUGFLAGS="-g", 
	CDEBUGFLAGS="-O"; CXXDEBUGFLAGS="-O")

CDEBUGFLAGS="$CDEBUGFLAGS $CFLAGS"
CXXDEBUGFLAGS="$CXXDEBUGFLAGS $CFLAGS"
AC_SUBST(CDEBUGFLAGS)
AC_SUBST(CXXDEBUGFLAGS)

# -----------------------------------------------------------------------
#
# Check if we are using (and creating) shared libraries 
# If so, we use the information from tclConfig.sh to determine the compiler
# options. 
#
# -----------------------------------------------------------------------

AC_ARG_ENABLE(shared, [--enable-shared    build and use shared libraries],
	SHARED=1,
	SHARED=0)
AC_SUBST(SHARED)

if test $SHARED -eq 0 ; then
	echo "Don't build shared libraries"
else
	echo "Will build shared libraries"
fi

# Flags to pass to cc when compiling the components of a shared library:
SHLIB_CFLAGS=$TCLUTIL_SHLIB_CFLAGS

# Base command to use for combining object files into a shared library:
if test "$VLTGNU" = "1" ; then
        SHLIB_LD="gcc -ansi -shared -fPIC"
        if test "$OS" = "HP-UX" ; then
                SHLIB_LD="$SHLIB_LD -Xlinker -b -Xlinker +s"
        fi
else
        SHLIB_LD=$TCLUTIL_SHLIB_LD
fi

# Suffix to use for the name of a shared library.
SHLIB_SUFFIX=$TCLUTIL_SHLIB_SUFFIX

# Either '$LIBS' (if dependent libraries should be included when linking
# shared libraries) or an empty string.  See Tcl's configure.in for more
# explanation.
SHLIB_LD_LIBS=$TCLUTIL_SHLIB_LD_LIBS

# Library file(s) to include in tclsh and other base applications
# in order to provide facilities needed by DLOBJ above.
DL_LIBS=$TCLUTIL_DL_LIBS

# Flags to pass to the compiler when linking object files into
# an executable tclsh or tcltest binary.
LD_FLAGS=$TCLUTIL_LD_FLAGS

# Flags to pass to cc, such as "-Wl,-R,/usr/local/tcl/lib", that tell the
# run-time dynamic linker where to look for shared libraries such as
# libtcl.so.  Used when linking applications.  Only works if there
# is a variable "LIB_RUNTIME_DIR" defined in the Makefile.
LD_SEARCH_FLAGS=$TCLUTIL_LD_SEARCH_FLAGS

AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SHLIB_LD_LIBS)
AC_SUBST(DL_LIBS)
AC_SUBST(LD_FLAGS)
AC_SUBST(LD_SEARCH_FLAGS)

# -----------------------------------------------------------------------
# Check the location of X libraries and includes.
# -----------------------------------------------------------------------

# -I switch(es) to use to make all of the X11 include files accessible:
XINCSW=$TCLUTIL_XINCSW

# Linker switch(es) to use to link with the X11 library archive.
XLIBSW=$TCLUTIL_XLIBSW

# dir for X libs
XLIBDIR=$TCLUTIL_XLIBDIR

AC_SUBST(XINCSW)
AC_SUBST(XLIBSW)
AC_SUBST(XLIBDIR)

# -----------------------------------------------------------------------
#
# Get the Tcl/Tk information from the tclutilConfig.sh file
#
# -----------------------------------------------------------------------

# get the -L and -l library flags

TCL_LIB_SPEC=$TCLUTIL_TCL_LIB_SPEC
TK_LIB_SPEC=$TCLUTIL_TK_LIB_SPEC
TCLX_LIB_SPEC=$TCLUTIL_TCLX_LIB_SPEC
ITCL_LIB_SPEC=$TCLUTIL_ITCL_LIB_SPEC
ITK_LIB_SPEC=$TCLUTIL_ITK_LIB_SPEC
BLT_LIB_SPEC=$TCLUTIL_BLT_LIB_SPEC

AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TCLX_LIB_SPEC)
AC_SUBST(ITCL_LIB_SPEC)
AC_SUBST(ITK_LIB_SPEC)
AC_SUBST(BLT_LIB_SPEC)

# get the -I include flags

TCLINCSW=$TCLUTIL_TCLINCSW
TKINCSW=$TCLUTIL_TKINCSW

AC_SUBST(TCLINCSW)
AC_SUBST(TKINCSW)

# add Tix support (enter version here: there is no tixConfig.sh...)
# assume tix is installed in the same place
# TIX_VERSION=4.1
# TCL_VERSION=$TCLUTIL_TCL_VERSION
# test -z "$TIX_LIBRARY" || TIX_LIB_PATH="-L `dirname $TIX_LIBRARY`"
# TIX_LIB_SPEC="$TIX_LIB_PATH -ltix$TIX_VERSION.$TCL_VERSION.1"
# TIX_SAM_LIB_SPEC="$TIX_LIB_PATH -ltixsam$TIX_VERSION.$TCL_VERSION.1"
# 
# AC_SUBST(TIX_LIB_SPEC)
# AC_SUBST(TIX_SAM_LIB_SPEC)

# -----------------------------------------------------------------------
# tcl package library files
# -----------------------------------------------------------------------
TCL_LIBRARY=$TCLUTIL_TCL_LIBRARY
AC_SUBST(TCL_LIBRARY)

TK_LIBRARY=$TCLUTIL_TK_LIBRARY
AC_SUBST(TK_LIBRARY)

BLT_LIBRARY=$TCLUTIL_BLT_LIBRARY
AC_SUBST(BLT_LIBRARY)

AC_SUBST(TCLUTIL_LIBRARY)
AC_SUBST(ASTROTCL_LIBRARY)

# -----------------------------------------------------------------------
#       system libs
# -----------------------------------------------------------------------
LIBS=$TCLUTIL_LIBS $TCL_LIBS
AC_SUBST(LIBS)

# -----------------------------------------------------------------------
# Check if we are using the installed TCLUTIL library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $TCLUTIL_SRC_ROOT; then
	TCLUTIL_LIB=$TCLUTIL_BUILD_LIB_SPEC
	TCLUTIL_LIB_STATIC=$TCLUTIL_BUILD_LIB_SPEC_STATIC
	TCLUTIL_BUILD_LIBRARY=$TCLUTIL_BUILD_LIBRARY
else
	TCLUTIL_LIB=$TCLUTIL_LIB_SPEC
	TCLUTIL_LIB_STATIC=$TCLUTIL_LIB_SPEC_STATIC
	TCLUTIL_BUILD_LIBRARY=$TCLUTIL_LIBRARY
fi
AC_SUBST(TCLUTIL_SRC_ROOT)
AC_SUBST(TCLUTIL_LIB)
AC_SUBST(TCLUTIL_LIB_SPEC)
AC_SUBST(TCLUTIL_LIB_STATIC)
AC_SUBST(TCLUTIL_BUILD_LIBRARY)
AC_SUBST(TCLUTIL_BUILD_INCLUDES)

# -----------------------------------------------------------------------
# Check if we are using the installed ASTROTCL library and include files
# or local development versions
# -----------------------------------------------------------------------
if test -d $ASTROTCL_SRC_ROOT; then
	ASTROTCL_LIB=$ASTROTCL_BUILD_LIB_SPEC
	ASTROTCL_LIB_STATIC=$ASTROTCL_BUILD_LIB_SPEC_STATIC
	ASTROTCL_BUILD_LIBRARY=$ASTROTCL_BUILD_LIBRARY
else
	ASTROTCL_LIB=$ASTROTCL_LIB_SPEC
	ASTROTCL_LIB_STATIC=$ASTROTCL_LIB_SPEC_STATIC
	ASTROTCL_BUILD_LIBRARY=$ASTROTCL_LIBRARY
fi
AC_SUBST(ASTROTCL_SRC_ROOT)
AC_SUBST(ASTROTCL_LIB)
AC_SUBST(ASTROTCL_LIB_SPEC)
AC_SUBST(ASTROTCL_LIB_STATIC)
AC_SUBST(ASTROTCL_BUILD_LIBRARY)
AC_SUBST(ASTROTCL_BUILD_INCLUDES)

#--------------------------------------------------------------------
# Propagate prefix argument as installation directory.
#--------------------------------------------------------------------
INSTALL_TARGET=$prefix
DESTDIR="${INSTALL_TARGET}"
BINDIR="${INSTALL_TARGET}"/bin
LIBDIR="${INSTALL_TARGET}"/lib
INCDIR="${INSTALL_TARGET}"/include/cat
MANDIR="${INSTALL_TARGET}"/man
CAT_DIR=$LIBDIR/cat
CAT_LIBRARY=$CAT_DIR
CAT_BUILD_LIBRARY=$SRC_ROOT/tclcat/library
CAT_BUILD_INCLUDES="-I$SRC_ROOT/tclcat/include -I$SRC_ROOT/astrocat/include"

AC_SUBST(INSTALL_TARGET)
AC_SUBST(DESTDIR)
AC_SUBST(BINDIR)
AC_SUBST(LIBDIR)
AC_SUBST(INCDIR)
AC_SUBST(MANDIR)
AC_SUBST(CAT_DIR)
AC_SUBST(CAT_LIBRARY)
AC_SUBST(CAT_BUILD_LIBRARY)
AC_SUBST(CAT_BUILD_INCLUDES)

#--------------------------------------------------------------------
#	Set name of library to link
#--------------------------------------------------------------------

# String to pass to linker to pick up the Cat library from its
# build directory.
CAT_BUILD_LIB_SPEC="-L$SRC_ROOT -lcat"

# static version of above
CAT_BUILD_LIB_SPEC_STATIC="$SRC_ROOT/libcat.a"

# String to pass to linker to pick up the Cat library from its
# installed directory.
CAT_LIB_SPEC="-L$LIBDIR -lcat"

# static version of above
CAT_LIB_SPEC_STATIC="$LIBDIR/libcat.a"

# if we are not building shared libraries, make sure we use the static
# libraries and not get an outdated shared library by accident
if test "$SHARED" = "0"
then
    CAT_BUILD_LIB_SPEC=$CAT_BUILD_LIB_SPEC_STATIC
    CAT_LIB_SPEC=$CAT_LIB_SPEC_STATIC
fi

AC_SUBST(CAT_BUILD_LIB_SPEC)
AC_SUBST(CAT_BUILD_LIB_SPEC_STATIC)
AC_SUBST(CAT_LIB_SPEC)
AC_SUBST(CAT_LIB_SPEC_STATIC)

#--------------------------------------------------------------------
#	Print out some of the more important settings 
#--------------------------------------------------------------------
echo "
Configuration results (edit and run ./config.status to modify):

C   Compiler                                 => $CC
C++ Compiler                                 => $CXX
C++ include flag                             => $CXX_INCLUDE"

if test "$NO_TCL" = "0" ; then
echo "
X include files                              => $XINCSW
Tcl include files                            => $TCLINCSW
Tk include files                             => $TKINCSW

X libs                                       => $XLIBSW
Tcl libs                                     => $TCL_LIB_SPEC
Tk libs                                      => $TK_LIB_SPEC
TclX libs                                    => $TCLX_LIB_SPEC
Itcl libs                                    => $ITCL_LIB_SPEC
Itk libs                                     => $ITK_LIB_SPEC
BLT libs                                     => $BLT_LIB_SPEC
Tclutil libs                                 => $TCLUTIL_LIB_SPEC
Astrotcl libs                                => $ASTROTCL_LIB_SPEC

directory containing tcl library files       => $TCL_LIBRARY
directory containing tk  library files       => $TK_LIBRARY
directory containing blt library files       => $BLT_LIBRARY

install catlib include files in              => $INCDIR"
fi

echo "
install catlib binaries in                   => $BINDIR
install catlib libraries in                  => $LIBDIR

default install dir INSTALL_TARGET           => $INSTALL_TARGET
"

#--------------------------------------------------------------------
#	Generate the Makefiles etc...
#--------------------------------------------------------------------
export NO_TCL
AC_OUTPUT(\
	Makefile \
        makefile.mk \
        catConfig.sh \
        \
	astrocat/Makefile \
	astrocat/src/Makefile \
	astrocat/include/Makefile \
	astrocat/test/Makefile \
	astrocat/man/Makefile \
\
	ccat/Makefile \
	ccat/src/Makefile \
	ccat/include/Makefile \
	ccat/test/Makefile \
	ccat/man/Makefile \
\
	tclcat/Makefile \
	tclcat/src/Makefile \
	tclcat/include/Makefile \
	tclcat/library/Makefile \
	tclcat/library/cat_version.tcl \
	tclcat/test/Makefile \
	tclcat/demos/Makefile \
	tclcat/demos/cat.sh \
	tclcat/demos/cat_env.sh \
	tclcat/bitmaps/Makefile \
	tclcat/library/pkgIndex.tcl \
	tclcat/man/Makefile \
	, if test "$NO_TCL" = "0" ; then sh makelinks; fi ; make -k depend
)
